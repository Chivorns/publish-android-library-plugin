apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

// Bintray configuration
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = BINTRAY_REPO
        name = PUBLISH_ARTIFACT_ID
        desc = LIBRARY_DESC
        websiteUrl = GIT_REPO_URL
        issueTrackerUrl = GIT_REPO_URL + '/issues'
        vcsUrl = GIT_VCS_URL
        licenses = ALL_LICENSES
        githubRepo = GIT_USER_REPO_NAME //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        publish = true
        publicDownloadNumbers = true
        version {
            desc = LIBRARY_DESC
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}


// POM.xml configuration
group = PUBLISH_GROUP_ID
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID

                // Add your description here
                name LIBRARY_NAME
                description LIBRARY_DESC
                url GIT_REPO_URL

                // Set your license
                licenses {
                    license {
                        name LICENSE_NAME
                        url LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id DEVELOPER_ID
                        name DEVELOPER_NAME
                        email DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection GIT_VCS_URL
                    developerConnection GIT_VCS_URL
                    url GIT_REPO_URL
                }
            }
        }
    }
}


// Generate Files
version = PUBLISH_VERSION
if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
